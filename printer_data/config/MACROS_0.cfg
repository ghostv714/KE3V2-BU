######################################################################
#  MACROS   
######################################################################


[gcode_macro STARTUP_SCRIPT]
gcode:
  # Your custom startup commands go here
  G28 ; Home all axes
#   M104 S200 ; Set extruder temperature to 200C
#   M140 S60 ; Set bed temperature to 60C
  ; Add more commands as needed



[gcode_macro gantry_lvl]
gcode:
    G28
    G91
    G0 X164 Y114 F6000
    G4 P3000
    G0 Z130
    G4 P3000
    G0 Z-25 F4000
    G4 P3000
    G0 Z30
    G4 P3000
    G0 Z-100 F4000
    G28
    G4 P5000
    SCREWS_TILT_CALCULATE
###Bed Mesh
[gcode_macro G29]
gcode:
    
    G28
    BED_MESH_CALIBRATE
    SMART_PARK
    BED_MESH_PROFILE save=default


###Cancel Print
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro Z_OFFSET]
gcode:
    G28
    G0 X160 Y110 Z10 F6000
    M140 S60
    G4   P5000
    PROBE_CALIBRATE
    

[gcode_macro home_sp]
gcode:
    G28
    G0 F6000
    SMART_PARK
    SET_LED LED=light_bar GREEN=0 RED=1 BLUE=1

[gcode_macro chamber_heat]
gcode:
    G28 
    M106 S255 
    G0 F5000
    SMART_PARK
    M140 S105
    M109 S250
    G0 E10 F2000
   SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=CB1 TARGET=30
   SET_LED LED=light_bar GREEN=0 RED=1 BLUE=0

[gcode_macro PID_Extruder]
gcode:

    G28
    G1 F7800
    SMART_PARK
    M106 S250
    PID_CALIBRATE HEATER=extruder TARGET=250 [WRITE_FILE=1]
    SAVE_CONFIG
    G28
    FIRMWARE_RESTART

[gcode_macro PID_heater_bed]
gcode:

    G28
    G1 F7800
    SMART_PARK
    M106 S250
    PID_CALIBRATE HEATER=heater_bed TARGET=100 [WRITE_FILE=1]
    SAVE_CONFIG
    G28
    FIRMWARE_RESTART

[gcode_macro FILAMENT_LOAD]
gcode:
 SET_LED LED=light_bar GREEN=0 RED=0 BLUE=1 # Set light bar to blue
 G28                   # Home all axis
 SMART_PARK            # Smart-park 
 G4   P15000           # Wait 15s
 M104 S260             # Nozzle to 260c
 M109 S260             # Nozzel to 260 and wait
 G4   P10000           # Wait 10s
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E100 F500          # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.
 G4   P3000            # Wait 3 seconds
 SET_LED LED=light_bar GREEN=0 RED=0 BLUE=0 # Turn light bar off
 M104 S0               # Turn off the hotend heater


[gcode_macro FILAMENT_UNLOAD]
gcode:
 SET_LED LED=light_bar GREEN=0 RED=1 BLUE=0 # Set light bar to red
 G28                   # Home all axes
 SMART_PARK            # Smart-park      
 M104 S260             # Nozzle to 260c
 M109 S260             # Set nozzel to 260 and wait
 G4   P3000            # Wait 3 seconds
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1  E20 F200          # Mover the extruder 20mm at speed of 200mm/minute
 G1 E-120 F500         # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.
 G4   P3000            # Wait 3 seconds
 SET_LED LED=light_bar GREEN=1 RED=1 BLUE=1 # Turn light bar White
 M104 S0               #Turn off the hotend heater

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F3000
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-120 F2000
    RESTORE_GCODE_STATE NAME=M600_state





# use NEOPIXEL_DISPLAY LED=Led_Name TYPE=template_type MODE=template_mode

# for TYPE use:
# extruder_temp     :extruder temperature progress
# bed_temp          :bed temperature progress
# print_percent     :print progress
# printer_speed     :printer speed

# for MODE use:
# progress          :the leds will light up one by one
# glow              :all leds will fade from one color (or non) to other color

# more info: https://github.com/digitalninja-ro/klipper-neopixel/blob/master/README.md

[gcode_macro NEOPIXEL_DISPLAY]
gcode:
    {% set led = params.LED %}
    {% set type = params.TYPE %}
    {% set mode = params.MODE %}
    {% set my_neopixel = printer.configfile.config['neopixel ' ~ led] %}

    {% if mode == 'progress' %}
        {% for i in range(my_neopixel.chain_count|int) %}
            SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count|int}
        {% endfor %}
    {% endif %}
    {% if mode == 'glow' %}
        SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
    {% endif %}

[display_template led_extruder_temp_glow]
text:
    {% if printer.extruder.target > 0.0 %}
        {%  set temp = printer.extruder.target %}
    {% else %}
        {% set temp = printer.configfile.config.extruder.max_temp %}
    {% endif %}
    {% set ratio = printer.extruder.temperature / temp|float %}
    {ratio}, 0.0, {1-ratio}, 0.0

[display_template led_extruder_temp_progress]
param_led_num:  0
param_led_total: 2
text:
    {% if printer.extruder.target > 0.0 %}
        {%  set temp = printer.extruder.target %}
    {% else %}
        {% set temp = printer.configfile.config.extruder.max_temp %}
    {% endif %}
    {% set ratio = printer.extruder.temperature / temp|float %}
    {% set led_ratio = param_led_num|float / param_led_total %}
    {% if ratio > led_ratio %}
        {led_ratio}, 0.0, 0.0, 0.0
    {% else %}
        0.0, 0.0, 0.0, 0.0
    {% endif %}

[display_template led_bed_temp_glow]
text:
    {% if printer.heater_bed.target > 0.0 %}
        {%  set temp = printer.heater_bed.target %}
    {% else %}
        {% set temp = printer.configfile.config.heater_bed.max_temp %}
    {% endif %}
    {% set ratio = printer.heater_bed.temperature / temp|float %}
    {ratio}, 0.0, {1-ratio}, 0.0

[display_template led_bed_temp_progress]
param_led_num:  0
param_led_total: 2
text:
    {% if printer.heater_bed.target > 0.0 %}
        {%  set temp = printer.heater_bed.target %}
    {% else %}
        {% set temp = printer.configfile.config.heater_bed.max_temp %}
    {% endif %}
    {% set ratio = printer.heater_bed.temperature / temp|float %}
    {% set led_ratio = param_led_num|float / param_led_total %}
    {% if ratio > led_ratio %}
        {led_ratio}, 0.0, 0.0, 0.0
    {% else %}
        0.0, 0.0, 0.0, 0.0
    {% endif %}

[display_template led_print_percent_glow]
text:
    {% set ratio = printer.virtual_sdcard.progress %}
    0.0, {ratio}, 0.0, 0.0

[display_template led_print_percent_progress]
param_led_num:  0
param_led_total: 2
text:
    {% set ratio = printer.virtual_sdcard.progress %}
    {% set led_ratio   = param_led_num|float / param_led_total %}
    {% if ratio > led_ratio %}
        0.0, {led_ratio}, 0.0, 0.0
    {% else %}
        0.0, 0.0, 0.0, 0.0
    {% endif %}

[display_template led_printer_speed_glow]
text:
    {% set ratio  = printer.motion_report.live_velocity|float /  printer.configfile.config.printer.max_velocity|float %}
    0.0, {ratio}, 0.0, 0.0

[display_template led_printer_speed_progress]
param_led_num:  0
param_led_total: 3
text:
    {% set ratio  = printer.motion_report.live_velocity|float /  printer.configfile.config.printer.max_velocity|float %}
    {% set led_ratio    = param_led_num|float / param_led_total %}
    {% if ratio > led_ratio %}
        0.0, {led_ratio}, 0.0, 0.0
    {% else %}
        0.0, 0.0, 0.0, 0.0
    {% endif %}


#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode:




######################################################################
# TEST_MACROS   
######################################################################

[gcode_macro PAUSE_PRINT]
gcode:
    M83                        ; Set extruder to relative mode
    G1 E-1 F300                ; Retract the filament a bit
    G91                        ; Set relative positioning
    G1 Z10 F3000               ; Move the nozzle up 10mm
    G90                        ; Set absolute positioning
    G1 X0 Y0 F3000             ; Move the nozzle to the home position
    M84                        ; Disable motors

[gcode_macro SHUTDOWN_PROCEDURE]
gcode:
    M104 S0                    ; Turn off the extruder
    M140 S0                    ; Turn off the bed
    M106 S0                    ; Turn off any fans
    M84                        ; Disable motors
    SET_LED LED=th_leds GREEN=0 RED=0 BLUE=0 ; Turn off LEDs if applicable
    M117 Emergency Stop Activated ; Display a message on the LCD
